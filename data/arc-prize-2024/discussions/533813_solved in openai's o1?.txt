[rangtang](/rangtang) · 152nd in this Competition · Posted 17 days ago
arrow_drop_up7

  * notifications
  * create_new_folder
  * bookmark_border
  * format_quote
  * link

### solved in openai's o1?
I will try to see how far I can solve problems using openai's o1.
Currently, I have confirmed that I can solve the first problem.  
I plan to check the rest in the future. I would like to hear your opinions and
experimental results.  
It is difficult to reflect all the problems.
Thank you for your cooperation.
Here is my result:"007bbfb7"  
◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆  
User:You are a puzzle solving wizard. You are given a puzzle from the
abstraction and reasoning corpus developed by Francois
Chollet.<|eot_id|><|start_header_id|>user<|end_header_id|>


## Here are the example input and output pairs from which you should learn the
underlying rule to later predict the output for the given test input:


## [{'input': [[0, 7, 7], [7, 7, 7], [0, 7, 7]], 'output': [[0, 0, 0, 0, 7, 7,
0, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 7, 7, 0, 7, 7], [0, 7, 7,
0, 7, 7, 0, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 7, 7, 0, 7, 7, 0, 7, 7],
[0, 0, 0, 0, 7, 7, 0, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 7, 7,
0, 7, 7]]}, {'input': [[4, 0, 4], [0, 0, 0], [0, 4, 0]], 'output': [[4, 0, 4,
0, 0, 0, 4, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 4, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0,
0, 0, 0], [0, 0, 0, 4, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0,
0, 4, 0, 0, 0, 0]]}, {'input': [[0, 0, 0], [0, 0, 2], [2, 0, 2]], 'output':
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0,
0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0,
0, 0, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 2],
[2, 0, 2, 0, 0, 0, 2, 0, 2]]}, {'input': [[6, 6, 0], [6, 0, 0], [0, 6, 6]],
'output': [[6, 6, 0, 6, 6, 0, 0, 0, 0], [6, 0, 0, 6, 0, 0, 0, 0, 0], [0, 6, 6,
0, 6, 6, 0, 0, 0], [6, 6, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 0, 6, 6, 0], [0, 0, 0, 6, 0, 0,
6, 0, 0], [0, 0, 0, 0, 6, 6, 0, 6, 6]]}, {'input': [[2, 2, 2], [0, 0, 0], [0,
2, 2]], 'output': [[2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 2, 2, 0, 2, 2, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0,
0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 0, 0,
0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 2, 2]]}]


## Now, solve the following puzzle based on its input grid by applying the
rules you have learned from the training data.:


## [{'input': [[7, 0, 7], [7, 0, 7], [7, 7, 0]], 'output': [[]]}]
What is the output grid? Only provide the output grid in the form as in the
example input and output pairs. Do not provide any additional
information:<|eot_id|>  
Output:
◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆  
ChatGPT o1-preview:(actually, the step is in Japanese)  
Understanding GPT-3: Using Pattern Recognition
We are looking for a way to find patterns in the input grid to generate the
output grid.
Comparing grid sizes
We are looking at the grid sizes of the input and output. The input is 3x3 and
the output is 9x9, which is quite different.
Determining the expansion ratio
Since the output is 9x9 and the input is 3x3, we know that there is a rule to
expand the input grid to 9x9.
Exploring possible mappings
Looking at the location of the mapping from input to output, we are either
trying to put a copy at a specific location, convolve, rotate, reflect, or
apply a rule.
Expanding options to consider
What if the output grid self-convolves with the input grid? Or maybe it's
superimposed by changing the direction of movement. adicionales_grid_steps**
Determining the location
We are finding the location of the 7 on the input grid and using that location
to determine the location of the 7 on the output grid.
Exploring the factors behind the data we are looking at
The 7 appears in multiple locations on the output grid.
Transformations under consideration
The output grid may be formed using alignment of the input grid, convolution
with a kernel, or a sum of grids shifted in 8 directions.
I'm starting to see where I need to go.
Identify positions
I'm finding positions with nonzero elements and placing the input grid at the
corresponding positions in the output grid. The output grid is 9x9 in size,
sized based on the maximum shift.
Alignment, considering overlaps
Trial and error grid alignment
I'm trying to figure out how to place the input grid at each nonzero element
position in the 9x9 output grid, or convolve the input grid myself. It looks a
bit scattered, though.
Alignment and expansion
I'm initializing the output grid with 9x9 zeros, placing the values ​​of each
nonzero position (7) of the input grid, and updating the corresponding region
of the output grid.
Looking at the breakdown, it looks like I'm shifting the input grid at each
position and updating the output grid. I'm feeling the vibes.
Alignment
I'm creating the output grid by placing a corresponding copy of the grid at
each position and shifting it. I'm checking with test inputs to see if this
works.
Identifying positions
Finding non-zero positions in the input 3x3 grid and initializing a 9x9 output
grid with zeros. Placing the input grid at the non-zero positions.
Scanning and maximizing
As the input grid moves, we search for the maximum value for each position in
the output grid. This is how the output grid is formed step by step.
Creating a grid
Creating a 9x9 grid and placing a value of 7. Filling in the first 5 rows and
5 columns and leaving the rest zero.
Checking
The final output grid is 9x9, with some rows and columns filled with 7s. Other
rows are completely zero. We are seeing a tendency for excesses and think
there may be a specific pattern.
Finding user miscalculation. Checking the input grid positions and finding
ways to form the output grid.
Reusing grid structure
Finding ways to reuse the input grid and calculate in 3x3 blocks. Confirming
that this results in a 9x9 output grid.
Figuring out matrix type
Calculating the Kuronecker product to create a 9x9 matrix. Each element is
calculated by multiplying the rows and columns of A.
Matrix calculation
C is calculated by multiplying each element of A and B. Zeros and 7s are used
in some parts.
Looking at the block arrangement
The first three blocks can be calculated by moving down and to the right while
calculating each block.
Checking block operations
Setting values ​​to cc[0:3][6:9], scaling A at coordinates (1,0), (1,1), and
(1,2). Next, scaling is being performed for coordinates (2,0), (2,1), and
(2,2).
Exploring the relationship between position and shift  
It is interesting to see that non-zeros act as shifts by overlapping the
positions of non-zero elements in the input grid.
Exploring new approaches
I am trying various methods, such as summing the cross products of the rows
and columns of the input grid, calculating the "distance" of non-zero
elements, and convolution using logical OR.
Exploring ways to form
We are exploring how to overlap input grids, calculate the sum of nonzero
elements, and record the nonzero positions.
Exploring and adapting
Because of the time constraint, we are exploring how to accept the output
value of each position as nonzero and use the input grid and its inverse to
form the output grid.
Exploring
We are exploring how to calculate the output grid based on the positions of
nonzero elements in the input grid. Mathematical techniques such as Hanyu
multiplication may be used from the positions of nonzero elements at each
position.
Options to consider
We are exploring the possibility of the input grid being repeated three times
in a 3x3 grid format. As we continue our research focused on environmental
assessment of vegetables, our goal is to develop an efficient algorithm.
Unravelling the problem
We can see that the output grid repeats the input grid in 3x3 tiles. There are
certain rules for the placement of the tiles.
Exploring placement of tiles
Placing a 3x3 input grid in a 9x9 output grid. Placing copies at the nonzero
element positions of the input grid.
Placing tiles
Pasting copies at the positions of the output grid that correspond to the
nonzero positions in the input grid.
The progress of a CHUNK is as follows:
At each position, the input grid values ​​are transferred to the output grid.
The visual arrangement of the grid is tidied up.
json  
[[7, 0, 7, 0, 0, 0, 7, 0, 7],  
[7, 0, 7, 0, 0, 0, 7, 0, 7],  
[7, 7, 0, 0, 0, 0, 7, 7, 0],  
[7, 0, 7, 0, 0, 0, 7, 0, 7],  
[7, 0, 7, 0, 0, 0, 7, 0, 7],  
[7, 7, 0, 0, 0, 0, 7, 7, 0],  
[7, 0, 7, 7, 0, 7, 0, 0, 0],  
[7, 0, 7, 7, 0, 7, 0, 0, 0],  
[7, 7, 0, 7, 7, 0, 0, 0, 0]]
comment


## 6 Comments


### [Sirish Somanchi](/sirishks)
arrow_drop_up7
  * format_quote
  * link
o1-preview [solved 21.2%](https://arcprize.org/blog/openai-o1-results-arc-
prize) public-evaluation tasks and 18% semi-private tasks, taking an average
of 4.2 minutes per task.
See this
[notebook](https://www.kaggle.com/code/gregkamradt/testing-o1-preview-on-arc-
agi) for testing o1-preview on ARC.


### [rangtang](/rangtang)
arrow_drop_up2
  * format_quote
  * link
Thank you for sharing that information.  
I see, I didn't realize there were so many information sources besides Kaggle.
That's new to me.  
Even with O1, we're still far from achieving AGI, aren't we?  
Thank you for enlightening me.


### [Guillermo Barbadillo](/ironbar)
arrow_drop_up4
  * format_quote
  * link
I have tried a few training ARC tasks with o1. Sometimes it gets them right,
but other times does not understand the transformation at all. More concerning
is that it still hallucinates, telling me that it had verified that the code
worked when it didn't. <https://x.com/guille_bar/status/1834506366414684332>


### [Markus.JM](/maiernator)
arrow_drop_up2
  * format_quote
  * link
GPT 4o could already solve the filling tasks.  
o1 preview is impressive, however we have to wait for the full model and
reevaluate.


### [rangtang](/rangtang)
arrow_drop_up1
  * format_quote
  * link
Thank you for your explanation.  
Indeed, we're still a long way from true AGI, aren't we?  
I wasn't aware that GPT-4 could also solve some of these problems.  
Thank you for informing me about that.


### [James Huddle](/jameshuddle)
arrow_drop_up2
  * format_quote
  * link
You know that this particular example solution has dotted the internet, by
now. Here's a work-around: Make your own input/output set - something brand
new that nobody has ever see before. like  
train input = [[1,0,0],[0,0,0],[0,0,0]] output = [[0,1,0],[0,0,0],[0,0,0]],
etc, and then have a  
test input like [[0,0,0],[0,1,0],[0,0,0]]… It doesn't have to be difficult;
just novel. …i.e. not already plastered all over the internet. And then have a
o1 chat. ps. don't use THIS example, because…


### [rangtang](/rangtang)
arrow_drop_up1
  * format_quote
  * link
Thank you for your insight.  
You're right, the model might know the answers since they're already publicly
available online.  
I got a bit too excited because Claude and others couldn't answer these
before.  
Thank you for the clarification.
